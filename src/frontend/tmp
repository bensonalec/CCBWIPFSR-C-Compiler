Token('TYPE', 'int')
Token('SELF_DEFINED', 'main')
Token('OPEN_PAREN', '(')
Token('CLOSE_PAREN', ')')
Token('OPEN_BRACE', '{')
Token('IF_BRANCH', 'if')
Token('OPEN_PAREN', '(')
Token('INTEGER', '1')
Token('CLOSE_PAREN', ')')
Token('OPEN_BRACE', '{')
Token('CLOSE_BRACE', '}')
Token('ELSE_BRANCH', 'else')
Token('IF_BRANCH', 'if')
Token('OPEN_PAREN', '(')
Token('INTEGER', '0')
Token('CLOSE_PAREN', ')')
Token('OPEN_BRACE', '{')
Token('CLOSE_BRACE', '}')
Token('ELSE_BRANCH', 'else')
Token('OPEN_BRACE', '{')
Token('IF_BRANCH', 'if')
Token('OPEN_PAREN', '(')
Token('INTEGER', '1')
Token('CLOSE_PAREN', ')')
Token('OPEN_BRACE', '{')
Token('CLOSE_BRACE', '}')
Token('CLOSE_BRACE', '}')
Token('IF_BRANCH', 'if')
Token('OPEN_PAREN', '(')
Token('INTEGER', '1')
Token('CLOSE_PAREN', ')')
Token('TYPE', 'int')
Token('SELF_DEFINED', 'a')
Token('SET', '=')
Token('INTEGER', '0')
Token('SEMICOLON', ';')
Token('ELSE_BRANCH', 'else')
Token('TYPE', 'int')
Token('SELF_DEFINED', 'c')
Token('SET', '=')
Token('INTEGER', '2')
Token('SEMICOLON', ';')
Token('CLOSE_BRACE', '}')

(1, ['definitionList'], 2, ['function definition', 'definitionList'], 3, [Token('TYPE', 'int'), Token('SELF_DEFINED', 'main'), Token('OPEN_PAREN', '('), Token('CLOSE_PAREN', ')'), 'block'], 4, [Token('OPEN_BRACE', '{'), 'content', Token('CLOSE_BRACE', '}')], 5, ['content_terminal', 'content'], 6, ['if'], 7, [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block'], 8, ['arithmetic'], 9, ['value'], 10, [Token('INTEGER', '1')], 8, [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')], 6, ['content_terminal', 'content'], 7, ['else'], 8, [Token('ELSE_BRANCH', 'else'), 'content_terminal'], 9, ['if'], 10, [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block'], 11, ['arithmetic'], 12, ['value'], 13, [Token('INTEGER', '0')], 11, [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')], 7, ['content_terminal', 'content'], 8, ['else'], 9, [Token('ELSE_BRANCH', 'else'), 'block'], 10, [Token('OPEN_BRACE', '{'), 'content', Token('CLOSE_BRACE', '}')], 11, ['content_terminal'], 12, ['if'], 13, [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block'], 14, ['arithmetic'], 15, ['value'], 16, [Token('INTEGER', '1')], 14, [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')], 8, ['content_terminal', 'content'], 9, ['if'], 10, [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'content_terminal'], 11, ['arithmetic'], 12, ['value'], 13, [Token('INTEGER', '1')], 11, ['single_line'], 12, ['initialization', Token('SEMICOLON', ';')], 13, [Token('TYPE', 'int'), 'designation'], 14, [Token('SELF_DEFINED', 'a'), 'assignment', 'arithmetic'], 15, [Token('SET', '=')], 15, ['value'], 16, [Token('INTEGER', '0')], 9, ['content_terminal'], 10, ['else'], 11, [Token('ELSE_BRANCH', 'else'), 'content_terminal'], 12, ['single_line'], 13, ['initialization', Token('SEMICOLON', ';')], 14, [Token('TYPE', 'int'), 'designation'], 15, [Token('SELF_DEFINED', 'c'), 'assignment', 'arithmetic'], 16, [Token('SET', '=')], 16, ['value'], 17, [Token('INTEGER', '2')], 3, [])
`-- program
    `-- definitionList
        |-- function definition
        |   |-- Token('TYPE', 'int')
        |   |-- Token('SELF_DEFINED', 'main')
        |   |-- Token('OPEN_PAREN', '(')
        |   |-- Token('CLOSE_PAREN', ')')
        |   `-- block
        |       |-- Token('OPEN_BRACE', '{')
        |       |-- content
        |       |   |-- content_terminal
        |       |   |   `-- if
        |       |   |       |-- Token('IF_BRANCH', 'if')
        |       |   |       |-- Token('OPEN_PAREN', '(')
        |       |   |       |-- collation
        |       |   |       |   `-- arithmetic
        |       |   |       |       `-- value
        |       |   |       |           `-- Token('INTEGER', '1')
        |       |   |       |-- Token('CLOSE_PAREN', ')')
        |       |   |       `-- block
        |       |   |           |-- Token('OPEN_BRACE', '{')
        |       |   |           `-- Token('CLOSE_BRACE', '}')
        |       |   `-- content
        |       |       |-- content_terminal
        |       |       |   `-- else
        |       |       |       |-- Token('ELSE_BRANCH', 'else')
        |       |       |       `-- content_terminal
        |       |       |           `-- if
        |       |       |               |-- Token('IF_BRANCH', 'if')
        |       |       |               |-- Token('OPEN_PAREN', '(')
        |       |       |               |-- collation
        |       |       |               |   `-- arithmetic
        |       |       |               |       `-- value
        |       |       |               |           `-- Token('INTEGER', '0')
        |       |       |               |-- Token('CLOSE_PAREN', ')')
        |       |       |               `-- block
        |       |       |                   |-- Token('OPEN_BRACE', '{')
        |       |       |                   `-- Token('CLOSE_BRACE', '}')
        |       |       `-- content
        |       |           |-- content_terminal
        |       |           |   `-- else
        |       |           |       |-- Token('ELSE_BRANCH', 'else')
        |       |           |       `-- block
        |       |           |           |-- Token('OPEN_BRACE', '{')
        |       |           |           |-- content
        |       |           |           |   `-- content_terminal
        |       |           |           |       `-- if
        |       |           |           |           |-- Token('IF_BRANCH', 'if')
        |       |           |           |           |-- Token('OPEN_PAREN', '(')
        |       |           |           |           |-- collation
        |       |           |           |           |   `-- arithmetic
        |       |           |           |           |       `-- value
        |       |           |           |           |           `-- Token('INTEGER', '1')
        |       |           |           |           |-- Token('CLOSE_PAREN', ')')
        |       |           |           |           `-- block
        |       |           |           |               |-- Token('OPEN_BRACE', '{')
        |       |           |           |               `-- Token('CLOSE_BRACE', '}')
        |       |           |           `-- Token('CLOSE_BRACE', '}')
        |       |           `-- content
        |       |               |-- content_terminal
        |       |               |   `-- if
        |       |               |       |-- Token('IF_BRANCH', 'if')
        |       |               |       |-- Token('OPEN_PAREN', '(')
        |       |               |       |-- collation
        |       |               |       |   `-- arithmetic
        |       |               |       |       `-- value
        |       |               |       |           `-- Token('INTEGER', '1')
        |       |               |       |-- Token('CLOSE_PAREN', ')')
        |       |               |       `-- content_terminal
        |       |               |           `-- single_line
        |       |               |               |-- initialization
        |       |               |               |   |-- Token('TYPE', 'int')
        |       |               |               |   `-- designation
        |       |               |               |       |-- Token('SELF_DEFINED', 'a')
        |       |               |               |       |-- assignment
        |       |               |               |       |   `-- Token('SET', '=')
        |       |               |               |       `-- arithmetic
        |       |               |               |           `-- value
        |       |               |               |               `-- Token('INTEGER', '0')
        |       |               |               `-- Token('SEMICOLON', ';')
        |       |               `-- content
        |       |                   `-- content_terminal
        |       |                       `-- else
        |       |                           |-- Token('ELSE_BRANCH', 'else')
        |       |                           `-- content_terminal
        |       |                               `-- single_line
        |       |                                   |-- initialization
        |       |                                   |   |-- Token('TYPE', 'int')
        |       |                                   |   `-- designation
        |       |                                   |       |-- Token('SELF_DEFINED', 'c')
        |       |                                   |       |-- assignment
        |       |                                   |       |   `-- Token('SET', '=')
        |       |                                   |       `-- arithmetic
        |       |                                   |           `-- value
        |       |                                   |               `-- Token('INTEGER', '2')
        |       |                                   `-- Token('SEMICOLON', ';')
        |       `-- Token('CLOSE_BRACE', '}')
        `-- definitionList
1 : ['definitionList']
2 : ['function definition', 'definitionList']
3 : [Token('TYPE', 'int'), Token('SELF_DEFINED', 'main'), Token('OPEN_PAREN', '('), Token('CLOSE_PAREN', ')'), 'block']
4 : [Token('OPEN_BRACE', '{'), 'content', Token('CLOSE_BRACE', '}')]
5 : ['content_terminal', 'content']
6 : ['if']
7 : [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block']
8 : ['arithmetic']
9 : ['value']
10 : [Token('INTEGER', '1')]
8 : [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')]
6 : ['content_terminal', 'content']
7 : ['else']
8 : [Token('ELSE_BRANCH', 'else'), 'content_terminal']
9 : ['if']
10 : [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block']
11 : ['arithmetic']
12 : ['value']
13 : [Token('INTEGER', '0')]
11 : [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')]
7 : ['content_terminal', 'content']
8 : ['else']
9 : [Token('ELSE_BRANCH', 'else'), 'block']
10 : [Token('OPEN_BRACE', '{'), 'content', Token('CLOSE_BRACE', '}')]
11 : ['content_terminal']
12 : ['if']
13 : [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'block']
14 : ['arithmetic']
15 : ['value']
16 : [Token('INTEGER', '1')]
14 : [Token('OPEN_BRACE', '{'), Token('CLOSE_BRACE', '}')]
8 : ['content_terminal', 'content']
9 : ['if']
10 : [Token('IF_BRANCH', 'if'), Token('OPEN_PAREN', '('), 'collation', Token('CLOSE_PAREN', ')'), 'content_terminal']
11 : ['arithmetic']
12 : ['value']
13 : [Token('INTEGER', '1')]
11 : ['single_line']
12 : ['initialization', Token('SEMICOLON', ';')]
13 : [Token('TYPE', 'int'), 'designation']
14 : [Token('SELF_DEFINED', 'a'), 'assignment', 'arithmetic']
15 : [Token('SET', '=')]
15 : ['value']
16 : [Token('INTEGER', '0')]
9 : ['content_terminal']
10 : ['else']
11 : [Token('ELSE_BRANCH', 'else'), 'content_terminal']
12 : ['single_line']
13 : ['initialization', Token('SEMICOLON', ';')]
14 : [Token('TYPE', 'int'), 'designation']
15 : [Token('SELF_DEFINED', 'c'), 'assignment', 'arithmetic']
16 : [Token('SET', '=')]
16 : ['value']
17 : [Token('INTEGER', '2')]
3 : []
